import asyncio
import logging
import os
import re
import base64
import httpx

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackContext, filters
from telegram.constants import ChatAction

from openai_stuff.openai_stuff import OpenAIAssistant
from openai import OpenAI

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Tesseract
os.environ["TESSDATA_PREFIX"] = "/opt/homebrew/share/tessdata/"

TOKEN = ""
BOT_USERNAME = "ai_assist_travel_bot"

ASSISTANT_ID = ""
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']
ASSISTANT_GPT = OpenAIAssistant(OPENAI_API_KEY, ASSISTANT_ID)

OpenAI.api_key = OPENAI_API_KEY
client = OpenAI()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
# Configure the httpx logger to only output warnings or higher level messages
logging.getLogger("httpx").setLevel(logging.WARNING)


# Function to encode the image
def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')


async def get_balance(update: Update, context: CallbackContext) -> None:
    kb = [
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–π –∫—ç—à–±–µ–∫", web_app=WebAppInfo(url="https://b35d-2001-8f8-1b2f-a514-f83f-7537-cecb-4f8c.ngrok-free.app/user_dashboard.html"))]
    ]
    reply_markup = InlineKeyboardMarkup(kb)
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:", reply_markup=reply_markup)


async def shop(update: Update, context: CallbackContext) -> None:
    kb = [
        [InlineKeyboardButton("üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤", web_app=WebAppInfo(url="https://travel.ucoz.ae/shop/telegram_shop"))]
    ]
    reply_markup = InlineKeyboardMarkup(kb)
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=reply_markup)

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    user = update.message.from_user
    tg_username = user.username
    tg_first_name = user.first_name
    tg_last_name = user.last_name

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–µ—à–±–µ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # cashback = get_user_cashback(tg_username)
    cashback = 3250

    web_app_url = (f"https://b35d-2001-8f8-1b2f-a514-f83f-7537-cecb-4f8c.ngrok-free.app/user_dashboard.html"
                   f"?tg_username={tg_username}&tg_first_name={tg_first_name}&tg_last_name={tg_last_name}&cashback={cashback}")

    kb = [
        [KeyboardButton("üéß –ü–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")],
        [KeyboardButton("‚ÅâÔ∏è –û –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ"), KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤")],
        [KeyboardButton("üçΩÔ∏è –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫")],
        [KeyboardButton("üí∏ –ú–æ–π –∫—ç—à–±–µ–∫", web_app=WebAppInfo(url=web_app_url)), KeyboardButton("üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫")]
    ]
    reply_markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /start
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ–Ω—Å—å–µ—Ä–∂-–±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—É–≥–∞')
    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∏
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:", reply_markup=reply_markup)


def clean_response(text):
    cleaned_text = re.sub(r'„Äê\d+:\d+‚Ä†*„Äë', '', text)
    return cleaned_text.strip()


async def handle_operator(update: Update, context: CallbackContext, user_input: str) -> str:
    chat_id = update.effective_chat.id
    tg_username = update.effective_user.username
    context_thread_id = context.user_data.get('thread')

    await context.bot.send_chat_action(chat_id=chat_id, action="typing")
    await asyncio.sleep(0.8)

    try:
        logging.info(f'QUESTION: tg_username: {tg_username} - {user_input}')

        if context_thread_id:
            response, _ = ASSISTANT_GPT.fetch_formatted_response(user_input=user_input, thread_id=context_thread_id)
        else:
            response, thread_id = ASSISTANT_GPT.fetch_formatted_response(user_input=user_input)
            context.user_data['thread'] = thread_id

        if not response:
            raise ValueError("Received empty response from ChatGPT")

        cleaned_response = clean_response(response)
        logging.info(f'ANSWER: tg_username: {tg_username} - {cleaned_response}')
        return cleaned_response
    except Exception as e:
        logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + str(e))
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."


async def recognize_total_amount(image_path):
    base64_image = encode_image(image_path)

    try:
        with open(image_path, "rb") as image_file:
            response = client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": "–ù–∞–π–¥–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É —á–µ–∫–∞ –∏ –≤—ã–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ —ç—Ç—É —Å—É–º–º—É. "
                                                     "–ù–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞ –Ω–µ –≤—ã–≤–æ–¥–∏"},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{base64_image}"
                                },
                            },
                        ],
                    }
                ],
                max_tokens=10
            )
        return response.choices[0].message.content
    except httpx.RequestError as e:
        logging.error(f"An error occurred while requesting: {e}")
        raise
    except httpx.HTTPStatusError as e:
        logging.error(f"Error response {e.response.status_code} while requesting {e.request.url}")
        raise
    except Exception as e:
        logging.error(f"Error while the calling the transcribe_audio_with_openai {str(e)}")
        raise


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def handle_photo(update: Update, context: CallbackContext) -> None:
    photo_file = await update.message.photo[-1].get_file()
    file_path = os.path.join("/tmp", f"{photo_file.file_id}.jpg")
    await photo_file.download_to_drive(file_path)
    await update.message.reply_text("–§–æ—Ç–æ–≥—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    total_amount = await recognize_total_amount(file_path)

    if total_amount:
        await update.message.reply_text(f"–°—É–º–º–∞ –Ω–∞ —á–µ–∫–µ: {total_amount} —Ä—É–±.")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É –Ω–∞ —á–µ–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: CallbackContext) -> None:
    user_message = update.message.text
    chat_id = update.message.chat_id

    if user_message == "üéß –ü–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞":
        await update.message.reply_text("–°–≤—è–∑—ã–≤–∞—é –≤–∞—Å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º...")
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await asyncio.sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∏
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞ —Å–≤—è–∑–∏, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å")
        context.user_data['awaiting_response'] = True  # –§–ª–∞–≥ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif user_message in ["‚ÅâÔ∏è –û –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ", "üìã –°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤", "üçΩÔ∏è –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫", "üí∏ –ú–æ–π –∫—ç—à–±–µ–∫"]:
        context.user_data['awaiting_response'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        await handle_predefined_questions(update, context, user_message)
    elif user_message == "üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.")
    else:
        if context.user_data.get('awaiting_response'):
            response = await handle_operator(update, context, user_message)
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–µ–Ω—é.")


async def handle_predefined_questions(update: Update, context: CallbackContext, question_type: str) -> None:
    if question_type == "‚ÅâÔ∏è –û –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ":
        await update.message.reply_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç –æ —Å–µ—Ä–≤–∏—Å–µ...")
    elif question_type == "üìã –°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤":
        await update.message.reply_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤...")
    elif question_type == "üçΩÔ∏è –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫":
        await update.message.reply_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    elif question_type == "üí∏ –ú–æ–π –∫—ç—à–±–µ–∫":
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à –±–∞–ª–∞–Ω—Å...")
        # await get_balance(update, CallbackContext)
        # TODO


async def web_app_data(update: Update, context: CallbackContext):
    logging.info(update.message.web_app_data.data)


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
    application = ApplicationBuilder().token(TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('shop', shop))
    application.add_handler(CommandHandler('balance', get_balance))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print(f"Your bot is listening! Navigate to http://t.me/{BOT_USERNAME} to interact with it!")
    application.run_polling()
