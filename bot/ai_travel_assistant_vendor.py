import asyncio
import logging
from datetime import datetime

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackContext, filters, \
    ConversationHandler, CallbackQueryHandler
from telegram.constants import ChatAction
import requests


TOKEN = ""
BOT_USERNAME = "ai_assist_travel_vendor_bot"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(funcName)s - %(message)s', level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
CARD_NUMBER, AMOUNT, CONFIRM = range(3)


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext) -> None:
    chat_id = update.message.chat_id
    user = update.message.from_user
    tg_user_params = {'tg_id': user.id}

    response = requests.post("http://127.0.0.1:8000/check_vendor_by_user", json=tg_user_params)
    if response.status_code == 200:
        user_type = response.json()['user_type']
        if user_type != 'Vendor':
            await update.message.reply_text(f'–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—à–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤')
            return

        kb = [
            [KeyboardButton("üçΩÔ∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")],
            [KeyboardButton("üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å –∫—ç—à–±–µ–∫")]
        ]
        reply_markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)

        await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ–Ω—Å—å–µ—Ä–∂-–±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—É–≥–∞')
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ:",
                                        reply_markup=reply_markup)


async def handle_cashback(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–æ—Ç 1000 –¥–æ 9999):")
    return CARD_NUMBER


async def received_card_number(update: Update, context: CallbackContext) -> int:
    card_number = update.message.text
    if not card_number.isdigit() or not (1000 <= int(card_number) <= 9999):
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1000 –¥–æ 9999 –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return CARD_NUMBER

    context.user_data['card_number'] = card_number
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞:")
    return AMOUNT


async def received_amount(update: Update, context: CallbackContext) -> int:
    amount = update.message.text
    try:
        amount = float(amount)
        context.user_data['amount'] = amount

        card_number = context.user_data['card_number']
        message = f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:\n\n–ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: {card_number}\n–°—É–º–º–∞ —á–µ–∫–∞: {amount}"

        keyboard = [
            [InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data='save')],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(message, reply_markup=reply_markup)
        return CONFIRM
    except ValueError:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return AMOUNT


async def confirm(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query_data = query.data

    if query_data == 'save':
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–∑–∏—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # TODO
        await query.edit_message_text("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    elif query_data == 'cancel':
        await query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    return ConversationHandler.END


async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


async def error_handler(update: Update, context: CallbackContext) -> None:
    logging.error(msg="Exception while handling an update:", exc_info=context.error)


if __name__ == '__main__':
    # Create Telegram application
    application = ApplicationBuilder().token(TOKEN).build()

    # Command handlers
    application.add_handler(CommandHandler('start', start))

    # Conversation handler –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∫—ç—à–±–µ–∫–∞
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('üí∏ –ù–∞—á–∏—Å–ª–∏—Ç—å –∫—ç—à–±–µ–∫'), handle_cashback)],
        states={
            CARD_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_card_number)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_amount)],
            CONFIRM: [CallbackQueryHandler(confirm)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    application.add_handler(conv_handler)

    # Error handler
    application.add_error_handler(error_handler)

    # Start bot
    logging.info(f"Your bot is listening! Navigate to http://t.me/{BOT_USERNAME} to interact with it!")
    application.run_polling()
